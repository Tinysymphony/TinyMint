<h1>Development Blogs</h1>

<h3>>> Blog 6.24 </h3>
<p>用户上传服务器存储尚未完成，下载前应该先做一次服务器端的保存，存section信息+拼接的html+可能的上传图片。下载的时候应该是公用的js+css+拼接的html+上传的图片=压缩包</p>
<p>虽然和入库没什么关系，用户输入还是需要做点安全优化，后端应该增加err输入的信息处理，防止服务器由于err输入挂掉。</p>
<br>
<br>

<h3>>> Blog 6.23</h3>
<p>视频的加载使用iframe，虽然要求是输入iframe代码，实际逻辑是从里面正则+split搞到link，iframe还是自己定义的，方便设置样式</p>
<P>图像gallery目前是所有segment里面最丑陋的一个，采用bootstrap的教学案例，定制性很差，以后有空自己写个替换掉。</P>
<p>Ps : 最近增加了Markdown的显示模块，这里的开发日志可以全部换成md文件读取....</p>

<br>
<br>

<h3>>> Blog 6.20</h3>
<p>最终还是想分离编辑面板js里面那一坨坨放在string里面的html，没有正常的缩进很丑陋，同时也不方便修改</p>
<p>将所有的segment块类放在一个ejs里面，面板的ejs在底下include一个，设置成不显示，需要加载时用jquery选择html片段</p>
<p>至于resultBoard的展示采用比较愚蠢的方法（觉得比较简洁= =）。每次刷新时，获取每个segment里面的输入信息，post到后端，后端开一个post请求的路由，也是渲染部分ejs送回，但总感觉这样post请求太多不怎么好...
    虽然理想的目标是在前端组装页面......
</p>

<br>
<br>

<h3>>> Blog 6.6</h3>
<p>想到redis.conf还没有好好配置过，仔细一想目前这个状态是外部可以直接访问数据库的，完全暴露。</p>
<p>本机上试了下：redis-cli -h xxx.xxx.xxx.xxx</p>
<p>果然keys *能看到所有数据，还是太naive…
    redis.conf修改默认port并把requirepass的注释去掉，后面追加访问密码即可</p>
<p>用户登陆后的dashboard前端第一版完成。用户信息面板Input栏使用Codrops上一日本大神的作品</p>
<p>头像修改功能待加入...</p>

<br>
<br>

<h3>>> Blog 6.4</h3>
<p>目前对关系型数据库的理解是：一堆相同形状格式的东西放在一个小袋子（表）里面，然后小袋子都在一个大袋子（库）里面。
    非关系型是：任何形状大小的东西全丢进一个袋子，找的时候搜整个大袋子。
</p>

<p>
    关于Redis
</p>
<p>
    Redis是内存中的非关系型数据库，所以断电或者强制退出程序时数据会丢失，这就不可靠了。
    作为Nosql的特性：牺牲可靠性换性能。
    Redis是设置一定时间写回数据到外部存储，设定在其安装文件redis.conf里。
    里面save A B 是指每A秒至少有B次写入操作时，写回。
    同样可以找到dump.rdb的路径和文件名设置，这个相当于备份文件。
    还有种AOF方式这里先不谈..
</p>
<p>
    一开始使用就吃了写回的亏..
    查看了下启动redis-server的报错，主要有这几个问题：
    XXXXX文件操作失败  #root启动即可
    /etc/sysctl.conf 中 vm.overcommit_memory=0 #设置成1让内核可以分配所有内存，不顾当前内存状态
    XXXXX写回文件未指定，数据可能丢失  #用redis-server /path/to/conf的方式使conf生效
    其实最后我加了个alias改写了指定conf启动redis的命令，否则每次要打那个路径= =
</p>
<p>
    这样一来redis也可以使用~
</p>
<p>
    初学ajax，把表单的submit都去掉了，使用jquery中的ajax提交数据。
    但是这样一来在服务端做response的重定向是失败的，不会有任何反应（小白不明）
    目前是让服务端返回一个状态string，然后ajax的success中写跳转逻辑。
</p>
Tiny126ac9f6149081eb0e97c2e939eaad52126ac9f6149081eb0e97c2e939eaad52TinyBlog126ac9f6149081eb0e97c2e939eaad52记录生活  126ac9f6149081eb0e97c2e939eaad52アオハライド126ac9f6149081eb0e97c2e939eaad52いよいよ一晩の時間をあけておく、このアニメを見てしまった。 男のくせに、この少女漫画から改編された作品によく感動した。特に洸君が母親のことを追憶した場面を見て、あの「ごめんなさい」を聞くと、思えずに目が潤むようになった。 「いつか思い出した時、それを一緒に経験したみんなにとって、同じ温度の楽しい思いでになるように。」おれもこの言葉を気にいる。青春というのは、甘い夢とか、ともたちと共に作られた思い出とか、いろいろ小さく美しい欠片が組み合わせたもの。 小湊君の下の台詞も好き 「こういうのは照れたら負けたぜ、冷めるなんで、もっと爺婆になってからていつする！」 最近は進路をばかり考えてるのに、本心を失わうわけにはいけない。126ac9f6149081eb0e97c2e939eaad52中场休息126ac9f6149081eb0e97c2e939eaad52Python Image | numpy Notes126ac9f6149081eb0e97c2e939eaad52#说人话

今天在看数字水印的内容，还是数学苦手。不过尝试了下python的两个包，一个是图片处理的Image，还有方便数学运算的numpy（建议sudo apt-get install python-numpy获取）
Image库处理图片相当方便
import之后可以这样读写图片文件，同时可以根据后缀自动转换格式：
img=Image.open(‘xxx.png’)
img.save(‘newname.jpg’)
对于黑白图片是只有一个灰度的，而彩色RGB则是三个灰度，Image可以分别提取：
r,g,b=img.split()
获取大小：
lx, ly=img.size
提取的每一个原色灰度相当于一个黑白照片
Image可以使用匿名函数改变所有的像素点, 例如：
img.point( lambda p :  p * 2 )  #增强每一个点的亮度
常用的变换稍微做个笔记
img.rotate(arc)
img.resize((x,y))
img.show()
img.crop((x1,y1,x2,y2))
img.paste(ImageObject, (x1,y1,x2,y2))

——————————————————-

numpy配合Image能实现对图片数据的矩阵运算
（其实一维也能做二维的处理，因为想更直观偷懒所以试试看这个库）
最简单的获取方式：
picArray=numpy.array(img)  #提取图片信息到二维矩阵
picArray.shape  #查看其行列结构
picArray.size  #项数量
picArray.ndim  #维度
picArray.reshape(x,y)  #重构矩阵，在列表转矩阵的时候很好用
picArray.tolist()  #转列表
基本了解了下，高深的还不会Orz……
处理完后可以这样保存：
output=Image.fromarray(picArray)
output.save(‘xxxx.png’)